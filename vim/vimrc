" Plugins will be downloaded under the specified directory.
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

Plug 'ayu-theme/ayu-vim'

" LANGUAGE SERVER PROTOCOL

" A collection of common configurations for Neovim's built-in Language Server Protocol
" Plug 'neovim/nvim-lspconfig'

" Auto-completion plugin for Neovim written in Lua
" Plug 'hrsh7th/cmp-nvim-lsp'
" Plug 'hrsh7th/cmp-buffer'
" Plug 'hrsh7th/cmp-path'
" Plug 'hrsh7th/cmp-cmdline'
" Plug 'hrsh7th/nvim-cmp'

" light-weight LSP plugin based on Neovim's LSP with a highly performant UI 
" (code actions, hover docs, signature help, rename, preview definition, floating terminal, etc...)
Plug 'glepnir/lspsaga.nvim'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }

" Makes the interface more likeable by adding some icons
Plug 'kyazdani42/nvim-web-devicons'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" A pretty list for showing diagnostics, reference, telescope results, quickfix, and location lists 
" to help you solve all the trouble your code is causing.
Plug 'folke/trouble.nvim'


" FILE MANAGEMENT

" Extendable fuzzy finder
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

Plug 'preservim/nerdtree'

" STATUS LINE
Plug 'nvim-lualine/lualine.nvim'
Plug 'akinsho/bufferline.nvim', { 'tag': 'v2.*' }

" SYNTAX HIGHLIGHTING
Plug 'nvim-treesitter/nvim-treesitter'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'

" EDITING
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" Formatting
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" MISC
let g:dashboard_default_executive ='telescope'

call plug#end()

" -------------------------------------------------------------------------------

set termguicolors     " enable true colors support
let ayucolor="light"
colorscheme ayu

set nocompatible
set clipboard=unnamed

" Enable file type detection and automatic language-dependant indenting
" :help 'filetype'
filetype plugin indent on

" Ignore specific files in vim
" :help 'wildignore'
set wildignore+=*/.git,*/tmp/*,*.so,*.swp,*.zip

" make backspace key work in the same behaviour as other applications
" :help 'backspace'
set backspace=indent,eol,start

" Set lazyredraw on for performance improvements
" :help 'lazyredraw'
set lazyredraw

" Configure the leader to be Space and local leader to be \ 
" :help 'mapleader'
" :help 'maplocalleader'
let mapleader = "\<Space>"
let maplocalleader = "\\"


" Configure relative line numbers cause they're amazing!
" Auto toggle between relative and absolute line numbers on insert / view mode
" :help 'number'
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Configure indentation to always use spaces instead of tabs and indent by 2
" spaces instead of the default 8
set expandtab 
set autoindent
set history=500
set tabstop=2
set shiftwidth=2
set softtabstop=2
set colorcolumn=100

" Set symbols that indicate tabs and white spaces and use light grey colour
" :help 'list'
" :help 'listchars
set list
set listchars=tab:→\
set listchars+=trail:·
set listchars+=space:·
highlight NonText ctermfg=lightgrey
highlight SpecialKey ctermfg=lightgrey

" Enable spell checks and set the default language to English 
" Overwrite how the spelling errors should be highlighted using hi
" :help 'spell'
set spell
set ignorecase smartcase
set spelllang=en_gb
highlight clear SpellBad
highlight SpellBad cterm=undercurl 
" ctermfg=red

set termguicolors
lua << EOF
require("bufferline").setup{}
EOF




" TELESCOPE
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

" Bufferline
nnoremap <silent>[b :BufferLineCyclePrev<CR>
nnoremap <silent>]b :BufferLineCycleNext<CR>

" These commands will move the current buffer backwards or forwards in the bufferline
nnoremap <silent><mymap> :BufferLineMoveNext<CR>
nnoremap <silent><mymap> :BufferLineMovePrev<CR>

function! <SID>StripTrailingWhitespaces()
  let _s=@/
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  let @/=_s
  call cursor(l, c)
endfunction

" Automatically run StripTrailingWhitespaces function on file save on the
" given file names
autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx,*.py,*.feature, :call <SID>StripTrailingWhitespaces()

nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" AutoFormat
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

" ---------------------------------------------------------------------------------------
"  COC

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType javascript,js,typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" show dot & hidden files in nerd tree
let NERDTreeShowHidden=1
